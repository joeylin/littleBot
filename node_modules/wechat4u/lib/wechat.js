"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events');
var axios = require('axios');
var debug = require('debug')('wechat');
var CM = require('cookie-manager');

// Setting
var _defaultParamsSerializer = function _defaultParamsSerializer(params) {
  var qs = [];
  for (var key in params) {
    qs.push(key + '=' + params[key]);
  }return encodeURI(qs.join('&'));
};

// Private Method
var _getTime = function _getTime() {
  return new Date().getTime();
};
var _convertEmoji = function _convertEmoji(s) {
  return s.replace(/<span.*?class="emoji emoji(.*?)"><\/span>/g, function (a, b) {
    try {
      var _s = null;
      if (b.length == 4 || b.length == 5) {
        _s = ['0x' + b];
      } else if (b.length == 8) {
        _s = ['0x' + b.slice(0, 4), '0x' + b.slice(4, 8)];
      } else if (b.length == 10) {
        _s = ['0x' + b.slice(0, 5), '0x' + b.slice(5, 10)];
      } else {
        throw new Error('unknown emoji characters');
      }
      return String.fromCodePoint.apply(null, _s);
    } catch (err) {
      debug(b, err);
      return ' ';
    }
  });
};
var _contentPrase = function _contentPrase(s) {
  return _convertEmoji(s.replace('&lt;', '<').replace('&gt;', '>').replce('<br/>', '\n'));
};

// Private
var PROP = Symbol();
var API = Symbol();
var SPECIALUSERS = ['newsapp', 'fmessage', 'filehelper', 'weibo', 'qqmail', 'fmessage', 'tmessage', 'qmessage', 'qqsync', 'floatbottle', 'lbsapp', 'shakeapp', 'medianote', 'qqfriend', 'readerapp', 'blogapp', 'facebookapp', 'masssendapp', 'meishiapp', 'feedsapp', 'voip', 'blogappweixin', 'weixin', 'brandsessionholder', 'weixinreminder', 'wxid_novlwrv3lqwv11', 'gh_22b87fa7cb3c', 'officialaccounts', 'notification_messages', 'wxid_novlwrv3lqwv11', 'gh_22b87fa7cb3c', 'wxitil', 'userexperience_alarm', 'notification_messages'];
var STATE = {
  init: 'init',
  uuid: 'uuid',
  login: 'login',
  logout: 'logout'
};

var Wechat = function (_EventEmitter) {
  _inherits(Wechat, _EventEmitter);

  function Wechat() {
    _classCallCheck(this, Wechat);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Wechat).call(this));

    _this[PROP] = {
      uuid: '',
      uin: '',
      sid: '',
      skey: '',
      passTicket: '',
      formateSyncKey: '',
      deviceId: 'e' + Math.random().toString().substring(2, 17),

      baseRequest: {},
      syncKey: {}
    };

    _this[API] = {
      baseUri: '',
      rediUri: '',

      jsLogin: "https://login.weixin.qq.com/jslogin",
      login: "https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login",
      synccheck: "",
      webwxdownloadmedia: "",
      webwxuploadmedia: ""
    };

    _this.state = STATE.init;

    _this.user = []; // 登陆用户
    _this.memberList = []; // 所有好友

    _this.contactList = []; // 个人好友
    _this.groupList = []; // 群
    _this.publicList = []; // 公众账号
    _this.specialList = []; // 特殊账号

    _this.axios = axios.create({
      headers: { 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36' }
    });

    _this.axios.defaults.paramsSerializer = _defaultParamsSerializer;

    if (typeof window == "undefined") {
      _this.cm = new CM();
      _this.axios.interceptors.request.use(function (config) {
        config.headers['cookie'] = decodeURIComponent(_this.cm.prepare(config.url));
        return config;
      }, function (err) {
        return Promise.reject(err);
      });
      _this.axios.interceptors.response.use(function (res) {
        var cookies = res.headers['set-cookie'];
        if (cookies) _this.cm.store(res.config.url, cookies);
        return res;
      }, function (err) {
        return Promise.reject(err);
      });
    }
    return _this;
  }

  _createClass(Wechat, [{
    key: 'getUUID',
    value: function getUUID() {
      var _this2 = this;

      var params = {
        'appid': 'wx782c26e4c19acffb',
        'fun': 'new',
        'lang': 'zh_CN'
      };
      return this.axios.request({
        method: 'POST',
        url: this[API].jsLogin,
        params: params
      }).then(function (res) {
        _this2.emit('uuid');
        _this2.state = STATE.uuid;

        var re = /window.QRLogin.code = (\d+); window.QRLogin.uuid = "(\S+?)"/;
        var pm = res.data.match(re);
        if (!pm) {
          throw new Error("GET UUID ERROR");
        }
        var code = pm[1];
        var uuid = _this2[PROP].uuid = pm[2];

        if (code != 200) {
          throw new Error("GET UUID ERROR");
        }

        return uuid;
      }).catch(function (err) {
        debug(err);
        throw new Error('获取UUID失败');
      });
    }
  }, {
    key: 'checkScan',
    value: function checkScan() {
      var params = {
        'tip': 1,
        'uuid': this[PROP].uuid
      };
      return this.axios.request({
        method: 'GET',
        url: this[API].login,
        params: params
      }).then(function (res) {
        var re = /window.code=(\d+);/;
        var pm = res.data.match(re);
        var code = pm[1];

        if (code == 201) {
          return code;
        } else if (code == 408) {
          throw new Error(code);
        } else {
          throw new Error(code);
        }
      }).catch(function (err) {
        debug(err);
        throw new Error('获取扫描状态信息失败');
      });
    }
  }, {
    key: 'checkLogin',
    value: function checkLogin() {
      var _this3 = this;

      var params = {
        'tip': 0,
        'uuid': this[PROP].uuid
      };
      return this.axios.request({
        method: 'GET',
        url: this[API].login,
        params: params
      }).then(function (res) {
        var re = /window.code=(\d+);/;
        var pm = res.data.match(re);
        var code = pm[1];

        if (code == 200) {
          var _re = /window.redirect_uri="(\S+?)";/;
          var _pm = res.data.match(_re);
          _this3[API].rediUri = _pm[1] + '&fun=new';
          _this3[API].baseUri = _this3[API].rediUri.substring(0, _this3[API].rediUri.lastIndexOf("/"));

          // 接口更新
          _this3._APIUpdate(_this3[API].baseUri);

          return code;
        } else {
          throw new Error(code);
        }
      }).catch(function (err) {
        debug(err);
        throw new Error('获取确认登录信息失败');
      });
    }
  }, {
    key: 'login',
    value: function login() {
      var _this4 = this;

      return this.axios.request({
        method: 'GET',
        url: this[API].rediUri
      }).then(function (res) {
        _this4[PROP].skey = res.data.match(/<skey>(.*)<\/skey>/)[1];
        _this4[PROP].sid = res.data.match(/<wxsid>(.*)<\/wxsid>/)[1];
        _this4[PROP].uin = res.data.match(/<wxuin>(.*)<\/wxuin>/)[1];
        _this4[PROP].passTicket = res.data.match(/<pass_ticket>(.*)<\/pass_ticket>/)[1];

        _this4[PROP].baseRequest = {
          'Uin': parseInt(_this4[PROP].uin, 10),
          'Sid': _this4[PROP].sid,
          'Skey': _this4[PROP].skey,
          'DeviceID': _this4[PROP].deviceId
        };

        debug('login Success');
      }).catch(function (err) {
        debug(err);
        throw new Error('登录失败');
      });
    }
  }, {
    key: 'init',
    value: function init() {
      var _this5 = this;

      var params = {
        'pass_ticket': this[PROP].passTicket,
        'skey': this[PROP].skey,
        'r': _getTime()
      };
      var data = {
        BaseRequest: this[PROP].baseRequest
      };
      return this.axios.request({
        method: 'POST',
        url: '/webwxinit',
        baseURL: this[API].baseUri,
        params: params,
        data: data
      }).then(function (res) {
        var data = res.data;
        _this5[PROP].syncKey = data['SyncKey'];
        _this5.user = data['User'];

        var synckeylist = [];
        for (var e = _this5[PROP].syncKey['List'], o = 0, n = e.length; n > o; o++) {
          synckeylist.push(e[o]['Key'] + "_" + e[o]['Val']);
        }_this5[PROP].formateSyncKey = synckeylist.join("|");

        debug('wechatInit Success');

        if (data['BaseResponse']['Ret'] !== 0) throw new Error(data['BaseResponse']['Ret']);
        return true;
      }).catch(function (err) {
        debug(err);
        throw new Error('微信初始化失败');
      });
    }
  }, {
    key: 'notifyMobile',
    value: function notifyMobile() {
      var data = {
        'BaseRequest': this[PROP].baseRequest,
        'Code': 3,
        'FromUserName': this.user['UserName'],
        'ToUserName': this.user['UserName'],
        'ClientMsgId': _getTime()
      };
      return this.axios.request({
        method: 'POST',
        url: '/webwxstatusnotify',
        baseURL: this[API].baseUri,
        data: data
      }).then(function (res) {
        var data = res.data;
        debug('notifyMobile Success');
        if (data['BaseResponse']['Ret'] !== 0) throw new Error(data['BaseResponse']['Ret']);
        return true;
      }).catch(function (err) {
        debug(err);
        throw new Error('开启状态通知失败');
      });
    }
  }, {
    key: 'getContact',
    value: function getContact() {
      var _this6 = this;

      var params = {
        'lang': 'zh_CN',
        'pass_ticket': this[PROP].passTicket,
        'seq': 0,
        'skey': this[PROP].skey,
        'r': _getTime()
      };
      return this.axios.request({
        method: 'POST',
        url: '/webwxgetcontact',
        baseURL: this[API].baseUri,
        params: params
      }).then(function (res) {
        var data = res.data;
        _this6.memberList = data['MemberList'];

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _this6.memberList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var member = _step.value;

            member['NickName'] = _convertEmoji(member['NickName']);
            member['RemarkName'] = _convertEmoji(member['RemarkName']);

            if (member['VerifyFlag'] & 8) {
              _this6.publicList.push(member);
            } else if (SPECIALUSERS.indexOf(member['UserName']) > -1) {
              _this6.specialList.push(member);
            } else if (member['UserName'].indexOf('@@') > -1) {
              _this6.groupList.push(member);
            } else {
              _this6.contactList.push(member);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        debug(_this6.memberList.length, ' contacts detected');
        debug(_this6.publicList.length, ' publicList');
        debug(_this6.specialList.length, ' specialList');
        debug(_this6.groupList.length, ' groupList');
        debug(_this6.contactList.length, ' contactList');

        return _this6.memberList;
      }).catch(function (err) {
        debug(err);
        throw new Error('获取通讯录失败');
      });
    }
  }, {
    key: 'sync',
    value: function sync() {
      var _this7 = this;

      var params = {
        'sid': this[PROP].sid,
        'skey': this[PROP].skey,
        'pass_ticket': this[PROP].passTicket
      };
      var data = {
        'BaseRequest': this[PROP].baseRequest,
        "SyncKey": this[PROP].syncKey,
        'rr': ~_getTime()
      };
      return this.axios.request({
        method: 'POST',
        url: '/webwxsync',
        baseURL: this[API].baseUri,
        params: params,
        data: data
      }).then(function (res) {
        var data = res.data;
        if (data['BaseResponse']['Ret'] == 0) {
          _this7[PROP].syncKey = data['SyncKey'];
          var synckeylist = [];
          for (var e = _this7[PROP].syncKey['List'], o = 0, n = e.length; n > o; o++) {
            synckeylist.push(e[o]['Key'] + "_" + e[o]['Val']);
          }_this7[PROP].formateSyncKey = synckeylist.join("|");
        }
        return data;
      }).catch(function (err) {
        debug(err);
        throw new Error('获取新信息失败');
      });
    }
  }, {
    key: 'syncCheck',
    value: function syncCheck() {
      var params = {
        'r': _getTime(),
        'sid': this[PROP].sid,
        'uin': this[PROP].uin,
        'skey': this[PROP].skey,
        'deviceid': this[PROP].deviceId,
        'synckey': this[PROP].formateSyncKey
      };
      return this.axios.request({
        method: 'GET',
        url: this[API].synccheck,
        params: params
      }).then(function (res) {
        var re = /window.synccheck={retcode:"(\d+)",selector:"(\d+)"}/;
        var pm = res.data.match(re);

        var retcode = pm[1];
        var selector = pm[2];

        return {
          retcode: retcode, selector: selector
        };
      }).catch(function (err) {
        debug(err);
        throw new Error('同步失败');
      });
    }
  }, {
    key: 'handleMsg',
    value: function handleMsg(data) {
      var _this8 = this;

      debug('Receive ', data['AddMsgList'].length, 'Message');

      data['AddMsgList'].forEach(function (msg) {
        var type = msg['MsgType'];
        var fromUser = _this8._getUserRemarkName(msg['FromUserName']);
        var content = msg['Content'];

        switch (type) {
          case 51:
            debug(' Message: Wechat Init');
            _this8.emit('init-message');
            break;
          case 1:
            debug(' Text-Message: ', fromUser, ': ', content);
            _this8.emit('text-message', msg);
            break;
          case 3:
            debug(' Picture-Message: ', fromUser, ': ', content);
            _this8.emit('picture-message', msg);
            break;
          case 34:
            debug(' Voice-Message: ', fromUser, ': ', content);
            _this8.emit('voice-message', msg);
            break;
        }
      });
    }
  }, {
    key: 'syncPolling',
    value: function syncPolling() {
      var _this9 = this;

      this.syncCheck().then(function (state) {
        if (state.retcode == '1100' || state.retcode == '1101') {
          _this9.state = STATE.logout;
          debug(state.retcode == '1100' ? '你登出了微信' : '你在其他地方登录了 WEB 版微信');
          _this9.emit('logout', state.retcode == '1100' ? '你登出了微信' : '你在其他地方登录了 WEB 版微信');
        } else if (state.retcode == '0') {
          if (state.selector == '2') {
            _this9.sync().then(function (data) {
              _this9.handleMsg(data);
              _this9.syncPolling();
            }).catch(function (err) {
              throw err;
            });
          } else if (state.selector == '7') {
            debug('WebSync Mobile Open');
            _this9.emit('mobile-open');
            _this9.syncPolling();
          } else if (state.selector == '0') {
            debug('WebSync Normal');
            _this9.syncPolling();
          } else {
            debug('WebSync Others', state.selector);
            _this9.syncPolling();
          }
        }
      }).catch(function (err) {
        debug(err);
      });
    }
  }, {
    key: 'logout',
    value: function logout() {
      var params = {
        redirect: 1,
        type: 0,
        skey: this[PROP].skey
      };
      // data加上会出错，不加data也能登出
      // let data = {
      //   sid: this[PROP].sid,
      //   uin: this[PROP].uin
      // }
      return this.axios.request({
        method: 'POST',
        url: '/webwxlogout',
        baseURL: this[API].baseUri,
        params: params
      }).then(function (res) {
        return '登出成功';
      }).catch(function (err) {
        debug(err);
        throw new Error('可能登出成功');
      });
    }
  }, {
    key: 'start',
    value: function start() {
      var _this10 = this;

      return this.checkScan().then(function () {
        _this10.emit('scan');
        return _this10.checkLogin();
      }).then(function () {
        _this10.emit('confirm');
        return _this10.login();
      }).then(function () {
        return _this10.init();
      }).then(function () {
        return _this10.notifyMobile();
      }).then(function () {
        return _this10.getContact();
      }).then(function (memberList) {
        _this10.emit('login', memberList);
        _this10.state = STATE.login;
        return _this10.syncPolling();
      }).catch(function (err) {
        _this10.emit('error', err);
        return Promise.reject(err);
      });
    }
  }, {
    key: 'sendMsg',
    value: function sendMsg(msg, to) {
      var params = {
        'pass_ticket': this[PROP].passTicket
      };
      var clientMsgId = _getTime() + '0' + Math.random().toString().substring(2, 5);
      var data = {
        'BaseRequest': this[PROP].baseRequest,
        'Msg': {
          'Type': 1,
          'Content': msg,
          'FromUserName': this.user['UserName'],
          'ToUserName': to,
          'LocalID': clientMsgId,
          'ClientMsgId': clientMsgId
        }
      };
      this.axios.request({
        method: 'POST',
        url: '/webwxsendmsg',
        baseURL: this[API].baseUri,
        params: params,
        data: data
      }).then(function (res) {
        var data = res.data;
        if (data['BaseResponse']['Ret'] !== 0) throw new Error(data['BaseResponse']['Ret']);
      }).catch(function (err) {
        debug(err);
        throw new Error('发送信息失败');
      });
    }
  }, {
    key: '_APIUpdate',
    value: function _APIUpdate(hostUri) {
      var fileUri = "";
      var webpushUri = "";

      hostUri.indexOf("wx2.qq.com") > -1 ? (fileUri = "file2.wx.qq.com", webpushUri = "webpush2.weixin.qq.com") : hostUri.indexOf("qq.com") > -1 ? (fileUri = "file.wx.qq.com", webpushUri = "webpush.weixin.qq.com") : hostUri.indexOf("web1.wechat.com") > -1 ? (fileUri = "file1.wechat.com", webpushUri = "webpush1.wechat.com") : hostUri.indexOf("web2.wechat.com") > -1 ? (fileUri = "file2.wechat.com", webpushUri = "webpush2.wechat.com") : hostUri.indexOf("wechat.com") > -1 ? (fileUri = "file.wechat.com", webpushUri = "webpush.wechat.com") : hostUri.indexOf("web1.wechatapp.com") > -1 ? (fileUri = "file1.wechatapp.com", webpushUri = "webpush1.wechatapp.com") : (fileUri = "file.wechatapp.com", webpushUri = "webpush.wechatapp.com");

      this[API].webwxdownloadmedia = "https://" + fileUri + "/cgi-bin/mmwebwx-bin/webwxgetmedia", this[API].webwxuploadmedia = "https://" + fileUri + "/cgi-bin/mmwebwx-bin/webwxuploadmedia", this[API].synccheck = "https://" + webpushUri + "/cgi-bin/mmwebwx-bin/synccheck";
    }
  }, {
    key: '_getUserRemarkName',
    value: function _getUserRemarkName(uid) {
      var name = '';

      this.memberList.forEach(function (member) {
        if (member['UserName'] == uid) {
          name = member['RemarkName'] ? member['RemarkName'] : member['NickName'];
        }
      });

      return name;
    }
  }, {
    key: 'friendList',
    get: function get() {
      var members = [];

      this.groupList.forEach(function (member) {
        members.push({
          username: member['UserName'],
          nickname: '群聊: ' + member['NickName'],
          py: member['RemarkPYQuanPin'] ? member['RemarkPYQuanPin'] : member['PYQuanPin']
        });
      });

      this.contactList.forEach(function (member) {
        members.push({
          username: member['UserName'],
          nickname: member['RemarkName'] ? member['RemarkName'] : member['NickName'],
          py: member['RemarkPYQuanPin'] ? member['RemarkPYQuanPin'] : member['PYQuanPin']
        });
      });

      return members;
    }
  }]);

  return Wechat;
}(EventEmitter);

Wechat.STATE = STATE;

exports = module.exports = Wechat;
//# sourceMappingURL=wechat.js.map